/** DCVideoPlayer * ------------------------------------------------------------------------------------- * @ description: wrapper for the doubleclick video player * @ developer: Neil Katz * @ version: 1.0  02.13.2014 * ------------------------------------------------------------------------------------- * */package com.blt.video.doubleClick{    import com.blt.components.TuneIn;    import com.blt.managers.VideoListManager;    import com.blt.constants.Constants;    import com.blt.events.RmAdEvent;    import com.blt.events.EventBroadcaster;    import com.blt.events.VideoEvent;    import com.blt.events.BltVideoEvent;    import com.blt.video.vo.VideoVO;    import com.google.ads.studio.ProxyEnabler;    import com.google.ads.studio.innovation.youtube.player.YTPlayerEvent;    import com.google.ads.studio.innovation.youtube.player.YTPlayerProperty;    import com.google.ads.studio.innovation.youtube.player.proxy.YTPlayer;        import flash.display.MovieClip;    import flash.events.Event;    import flash.media.Video;    import flash.net.NetStream;    import flash.system.Security;    public class DCYouTubeVideoPlayer	{		public static const PLAYER_CONTROLS_TYPE_NONE		: String = YTPlayerProperty.CONTROLS_TYPE_NONE; // no controls		public static const PLAYER_CONTROLS_TYPE_AUTOHIDE	: String = YTPlayerProperty.CONTROLS_TYPE_AUTOHIDE; // controls show on mouse over, hide on mouse out		public static const PLAYER_CONTROLS_TYPE_STANDARD	: String = YTPlayerProperty.CONTROLS_TYPE_STANDARD; // controls show, no hiding.				public static const PLAYER_CONTROLS_DARK			: String = YTPlayerProperty.CONTROLS_THEME_DARK;		public static const PLAYER_CONTROLS_LIGHT			: String = YTPlayerProperty.CONTROLS_THEME_LIGHT;				public static const PLAYER_CONTROLS_RED				: String = YTPlayerProperty.CONTROLS_COLOR_RED;		public static const PLAYER_CONTROLS_WHITE			: String = YTPlayerProperty.CONTROLS_COLOR_WHITE;						////////////////////////////////////////////// PUBLIC VARS //////////////////////////////////////////////////////////////////////////////////        public var bufferTime		    : Number = 1;		public var closeOnComplete	    : Boolean = false;		public var reportDuration	    : Boolean = false;		public var startMuted		    : Boolean = false;        public var pauseAtStart		    : Boolean = false;        public var streamVideo		    : Boolean = false;        public var initVideoPlayed      : Boolean = false;        public var addSkipMenuItem      : Boolean = false;		public var isPlaying			: Boolean = false;		public var allowFullscreen		: Boolean = false;						public var videoSmoothing	    : Boolean = true;		        public var ignoreControls       : Boolean = false;		public var showEndScreen		: Boolean = true;				public var theme				: String = PLAYER_CONTROLS_DARK;		public var controlsType			: String;		public var autoPlayType			: String;		public var clickForSoundText	: String;		public var progressBarColor		: String;				public var previewDuration		: Number;        public var loopVideoNum         : int = -1;        public var replayVideoNum       : int = -1;        public var playerID             : String = Constants.PLAYER_DEFAULT_ID;        public var enabler              : ProxyEnabler = ProxyEnabler.getInstance();               public var isPaused            	: Boolean;		public var isMuted             	: Boolean;		////////////////////////////////////////////// PRIVATE VARS //////////////////////////////////////////////////////////////////////////////////		private var videoPlaying		: Boolean = false;  ////// variable to know if the video is playing		private var initialLoad			: Boolean = false;	////// variable used for first video play        private var loopCount           : int = 0;		private var videoDuration		: Number;        private var videoProgressEvent  : String;		private var videoNum			: int = 0;        private var videoPath           : String = 'av5pqJaIeCk'; // requires a default value even if not using it.         private var videoReportingID    : String;        private var _tuneInID           : String = Constants.TUNEIN_DEFAULT_ID;		        private var _videoListManager   : VideoListManager;        private var broadcaster         : EventBroadcaster;        private var stream			    : NetStream;        private var videoPlayer			: YTPlayer;		private var ytPlayer			: Object;		private var videoProxy			: Object;		        private var video			    : Video;        private var videoTarget         : MovieClip;        private var menuTarget          : MovieClip;		private var isLoadAndPlay		: Boolean;        private var useTuneIn           : Boolean;		private var isPlayerReady		: Boolean;        /**         * DCYouTubeVideoPlayer Constructor         * @param: _videoTarget: is the display object that is on the stage that the video will be added to.         * @param: _startMuted: starts video with no sound.         * @param: _useTunein: use tunein component data to retrieve date coded video.         * @param: _controlsType: values are none, if using custom controls, autohide for controls and show when mouse is over video and standard that don't hide.                  */		public function DCYouTubeVideoPlayer( _videoTarget:MovieClip, _startMuted:Boolean = true, _useTunein:Boolean = false, _controlsType:String = PLAYER_CONTROLS_TYPE_AUTOHIDE )		{			trace("***********************************************************");			trace("******** DOUBLE CLICK YOUTUBE VIDEO WRAPPER V 1.0 *********");			trace("***********************************************************");            if( !_videoTarget )            {                throw new Error( "ALARM!!! :: must have a valid DoubleClick VideoPlayer object passed through the constructor" );                return;            }						Security.allowDomain("s.ytimg.com");			Security.allowDomain("s2.youtube.com");			Security.allowDomain("i1.ytimg.com");			Security.allowDomain("i2.ytimg.com");			Security.allowDomain("i3.ytimg.com");			Security.allowDomain("i4.ytimg.com");			Security.allowDomain("www.youtube.com");			Security.allowDomain("motifcdn2.doubleclick.net");			videoTarget 	= _videoTarget;            useTuneIn   	= _useTunein;            startMuted  	= _startMuted;			controlsType	= _controlsType;												// automatically set ignore controls to false if controls type is none, true is the default value for this player only. 			if( controlsType == PLAYER_CONTROLS_TYPE_AUTOHIDE || controlsType == PLAYER_CONTROLS_TYPE_STANDARD ) ignoreControls = true;			            if( !useTuneIn ) tuneInID = _tuneInID;									}		        public function destroy( e:Event = null ):void        {			trace( "DESTROY CALLED :: " + playerID );						removeProgressListener();			stopVideo();			clearVideoPlayer();            removeListeners();        }        public function init( e:Event = null ):void 		{			setUpVideo();					}						private function get videoListManager():VideoListManager		{			return _videoListManager;		}		        public function set tuneInID( value:String ):void        {            videoListManager.tuneInId = value;        }        /**         * videos are added in the flash IDE         * this method creates a generic object which adds         * videos based on their date code in an array.         */		public function addVideo( path:String, reportingID:String = "video", day:String = "default" ):void		{			if( !path )			{				throw new Error( "ALARM!!! :: No valid path in add video. Double Click Player requires a path to load video" );				return;			}						            videoListManager.addVideo( day, path, reportingID );		}        ////////////////////////////////////////////// PUBLIC METHODS :: LOAD AND PLAY VIDEO //////////////////////////////////////////////////////////////////////////////////        /**         * Loads and plays the first video on the list, sets initload value to false.         */        public function playInitVideo( e:RmAdEvent = null ):void        {            broadcaster.removeEventListener( RmAdEvent.TUNEIN_READY, playInitVideo );            if( useTuneIn && !TuneIn.isReady )            {                broadcaster.addEventListener( RmAdEvent.TUNEIN_READY, playInitVideo );                return;            }            loadNewVideo( 0, false );        }        /**         * Loads and plays video by video array position         */        public function loadNewVideo( vid:int, initLoad:Boolean = true ):void        {			initVideoPlayed = initLoad;            videoNum = vid;            var videoObj:VideoVO = videoListManager.getCurrentVideo( videoNum );            videoPath = videoObj.videoPath;            videoReportingID = videoObj.videoReportingID;						loadVideo();        }        /**         * Loads and plays video by video path and reporting id, doesn't need to have video list.         */        public function loadAndPlay( path:String, reportingID:String = "default" ):void        {			isLoadAndPlay = true;						videoPath = path;            videoReportingID = reportingID;			loadVideo();                }        /**         * Loads and plays video by video path and reporting id, doesn't need to have video list.         */        public function loadAndPause( path:String, reportingID:String = "default" ):void        {			isLoadAndPlay = true;            pauseAtStart = true;						videoPath = path;            videoReportingID = reportingID;						loadVideo();        }        ////////////////////////////////////////////// PUBLIC METHODS :: REPLAY VIDEO //////////////////////////////////////////////////////////////////////////////////        public function replayVideo( num:int = -1 ):void        {            if( videoNum == num || num == -1 || isLoadAndPlay )            {				videoProxy.replay();            }            else            {                replayWithSound( num );            }			addProgressListener();            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_PLAYING, { videoID:videoReportingID, playerId:playerID } ));        }        public function replayWithSound( num:int = -1 ):void        {            var vidNum:uint;						if( isLoadAndPlay )			{				videoProxy.replay();			}			else 			{				if( num != -1 ) vidNum = num;            	else if( replayVideoNum != -1 ) vidNum = replayVideoNum;            	else if( videoNum ) vidNum = videoNum;								videoPath = videoListManager.getCurrentVideo( vidNum ).videoPath;            	videoReportingID = videoListManager.getCurrentVideo( vidNum ).videoReportingID;	            loadNewVideo( vidNum );					            if( !videoListManager.getCurrentVideo( vidNum ) )	            {	                throw new Error("ALARM!!! ::: REPLAY WITH SOUND CALLED : VIDEO ARRAY IS NULL -- Make sure videos have been added before playing video." );	                return;	            }			}                                   sendVideoEvent( new BltVideoEvent( BltVideoEvent.PLAY_WITH_SOUND_CALLED, { videoID:videoReportingID, playerId:playerID }));            clearInitValues();        }        ////////////////////////////////////////////// PUBLIC METHODS :: VIDEO CONTROLS COMMANDS //////////////////////////////////////////////////////////////////////////////////        public function playVideo( e:BltVideoEvent = null ):void        {            trace( "PLAY VIDEO CALLED :: " + playerID );						if( !videoProxy )            {                trace("ALARM!!! ::: PLAY VIDEO CALLED : NO VIDEO CONTROLLER :: " + playerID );                return;            }            isPaused = false;			isPlaying = true;			addProgressListener();			videoProxy.play();            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_PLAYING, { videoID:videoReportingID, playerId:playerID } ));        }        public function muteAudio( e:BltVideoEvent = null ):void        {			videoProxy.mute();			isMuted = true;            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_MUTED, { videoID:videoReportingID, playerId:playerID } ));        }        public function unmuteAudio( e:BltVideoEvent = null ):void        {			checkForReplay();			isMuted = false;			videoProxy.unMute();            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_UNMUTED, { videoID:videoReportingID, playerId:playerID } ));        }        public function pauseVideo( e:BltVideoEvent = null ):void        {			trace( "PAUSE VIDEO CALLED :: " + playerID + "   IS PAUSED :: " + isPaused + "    VIDEO CONTROLLER :: " + videoProxy );						if( !videoProxy )            {                trace("ALARM!!! ::: PAUSE VIDEO CALLED : NO VIDEO CONTROLLER :: " + playerID );                return;            }            if( isPaused ) return;            isPaused = true;			videoProxy.pause();            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_PAUSED, { videoID:videoReportingID, playerId:playerID } ));        }        public function stopVideo( e:BltVideoEvent = null ):void        {            if( !videoProxy )            {                trace("ALARM!!! ::: STOP VIDEO CALLED : NO VIDEO CONTROLLER" );                return;            }            videoProxy.stop();			            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_STOPPED, { videoID:videoReportingID, playerId:playerID } ));        }        public function seekVideo( e:BltVideoEvent, _seek:Number = 0 ):void        {            if( !videoProxy )            {                trace("ALARM!!! ::: SEEK VIDEO CALLED : NO VIDEO CONTROLLER" );                return;            }            if ( e ) _seek = e.data.seekPos;            var _seekPos:Number = videoDuration * _seek;            videoProxy.seekTo( _seekPos, true );        }        /**         * Sets video back to the start and pauses it.         */        public function resetVideo():void        {            stopVideo();            seekVideo( null, 0 );        }        /**         * Skips video to end, can be called from right click menu once i figure it out.         */        public function skipVideo( e:Object = null, _skip:Number = .9 ):void        {            seekVideo( null, _skip );        }        ////////////////////////////////////////////// PRIVATE METHODS //////////////////////////////////////////////////////////////////////////////////        /**         * Calls the set up video methods in order.         */        private function setUpVideo():void        {			clearVideoPlayer();			initVideoPlayer();			setListeners();            //showBuffering();                    }        /**         * Inits player, properties are set in the flash IDE, fired everytime a new video is loaded.         */		private function initVideoPlayer():void		{          						videoPlayer = new YTPlayer();			videoProxy = videoPlayer.proxy;			ytPlayer = videoProxy.player;									videoProxy.controlsType = controlsType;			videoProxy.videoId = videoPath;			//videoProxy.autoPlayType = autoPlayType;			videoProxy.allowFullscreen = false;			videoPlayer.name = "DCVideoPlayer";			videoPlayer.width = videoTarget.width;			videoPlayer.height = videoTarget.height;						videoTarget.addChild( videoPlayer );						//videoProxy.addEventListener( 'ready', onPlayerReady );			//videoProxy.addEventListener("onError", onPlayerError);			//videoProxy.addEventListener("onStateChange", onPlayerStateChange);			//videoProxy.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);*/		}						private function onPlayerReady( e:Event = null ):void 		{			trace( "PLAYER READY :: DO SOME SHIT NOW" );			isPlayerReady = true;			loadVideo();		}        /**         * removes and destroys current videoPlayer object.         */		private function clearVideoPlayer( e:Event = null ):void		{            if( stream ) stream.close();			if( video ) video.clear();			if( videoPlayer ) 			{								videoProxy.destroyAllVideos();				videoPlayer.destroy();				if( videoTarget.contains( videoPlayer )) videoTarget.removeChild( videoPlayer );			}			videoProxy = null;			video = null;            stream = null;            videoProgressEvent = null;            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_CLEARED, { videoID:videoReportingID, playerId:playerID }));		}						private function loadVideo():void 		{			if( !isPlayerReady || !videoPath ) return;						if( pauseAtStart ) videoProxy.cueVideoById( videoPath );			else videoProxy.loadVideoById( videoPath );		}        /**         * Loops video based on the loopVideoNum value.         */        private function loopVideo():void        {			if( loopCount < loopVideoNum )			{				replayVideo();				loopCount++;			}			else			{				sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_LOOP_COMPLETE, { videoID:videoReportingID, playerId:playerID }));			}        }        /**         * When unmute is called, it will check if it was started muted and the first video, and replay with sound.         */        private function checkForReplay( e:Event = null ):void        {            if( !initVideoPlayed && startMuted )            {                clearInitValues();                replayWithSound();            }        }        private function addProgressListener():void        {            videoPlayer.removeEventListener( Event.ENTER_FRAME, updateVideo );            videoPlayer.addEventListener( Event.ENTER_FRAME, updateVideo );        }        private function removeProgressListener():void        {            videoPlayer.removeEventListener( Event.ENTER_FRAME, updateVideo );        }						private function onPlayerStateChange(event:Event):void 		{			// Event.data contains the event parameter, which is the new player state						var currentState:Number = Object ( event ).data;						trace("player state:", currentState );						switch ( Object ( event ).data ) 			{								case 0:					//dispatchEvent ( new Event ( VIDEO_COMPLETE ));					//removeEventListener ( Event.ENTER_FRAME, updateVideoProgress );					break;								case 1:					videoDuration = videoProxy.duration; //videoProxy.getDuration();										//addEventListener ( Event.ENTER_FRAME, updateVideoProgress ); 					break;								case 3:					break;			}		}        /**         * Mutes video if startMuted is set and initVideoPlayed is false.         */        private function isVideoMuted():void        {            trace( "IS VIDEO MUTED :: INIT VIDEO PLAYED: " + initVideoPlayed + "    START MUTED: " + startMuted ); 						if( !initVideoPlayed && startMuted )            {                muteAudio();            }            else            {                unmuteAudio();            }        }						private function forceStop(e:Object) 		{			YTPlayer.pauseAllVideos();			//ytVideo.proxy.removeEventListener( YTPlayerEvent.VIDEO_PLAY, forceStop);			//ytVideo.proxy.removeEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_0_PERCENT, forceStop);			//videoShouldStop = false;		}        ////////////////////////////////////////////// VIDEO EVENTS //////////////////////////////////////////////////////////////////////////////////		private function eventHandler(event:Object):void 		{			// do not delete this			/*if (videoShouldStop) 			{				try 				{					ytVideo.proxy.addEventListener( YTPlayerEvent.VIDEO_PLAY, forceStop);					ytVideo.proxy.addEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_0_PERCENT, forceStop);				} 				catch (e) 				{					// do nothing				}			}*/						trace ( "VIDEO STATUS: "+ event.type );						switch (event.type) 			{				case YTPlayerEvent.PLAYER_READY :							onPlayerReady();					break;								case YTPlayerEvent.VIDEO_PLAY :										videoDuration = videoProxy.duration || 0;					isVideoMuted();					addProgressListener();					break;								case YTPlayerEvent.VIDEO_COMPLETE :										videoComplete();					break;								case YTPlayerEvent.VIDEO_0_PERCENT :				case YTPlayerEvent.AUTOPLAY_VIDEO_0_PERCENT :					sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_0_PERCENT, { videoID:videoReportingID, playerId:playerID } ));					break;								case YTPlayerEvent.VIDEO_25_PERCENT :				case YTPlayerEvent.AUTOPLAY_VIDEO_25_PERCENT :					sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_25_PERCENT, { videoID:videoReportingID, playerId:playerID } ));					break;								case YTPlayerEvent.VIDEO_50_PERCENT :				case YTPlayerEvent.AUTOPLAY_VIDEO_50_PERCENT :					sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_50_PERCENT, { videoID:videoReportingID, playerId:playerID } ));					break;								case YTPlayerEvent.VIDEO_75_PERCENT :				case YTPlayerEvent.AUTOPLAY_VIDEO_75_PERCENT :					sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_75_PERCENT, { videoID:videoReportingID, playerId:playerID } ));					break;								case YTPlayerEvent.VIDEO_100_PERCENT :				case YTPlayerEvent.AUTOPLAY_VIDEO_100_PERCENT :					sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_100_PERCENT, { videoID:videoReportingID, playerId:playerID } ));					break;								case YTPlayerEvent.VIDEO_PAUSE :					removeProgressListener();					break;								case YTPlayerEvent.VIDEO_REPLAY :					addProgressListener();					break;								case YTPlayerEvent.VIDEO_MUTE :					break;								case YTPlayerEvent.VIDEO_UNMUTE :					checkForReplay();					break;								case YTPlayerEvent.VIDEO_FULLSCREEN :					break;								case YTPlayerEvent.VIDEO_EXIT_FULLSCREEN :					break;								case YTPlayerEvent.VIDEO_QUALITY_CHANGE :					break;								case YTPlayerEvent.PLAYER_ERROR :				case YTPlayerEvent.PLAYER_ERROR_EMBEDDED_PLAYBACK_NOT_ALLOWED :				case YTPlayerEvent.PLAYER_ERROR_EMBEDDED_PLAYBACK_NOT_ALLOWED2 :				case YTPlayerEvent.PLAYER_ERROR_INVALID_PARAMETER :				case YTPlayerEvent.PLAYER_ERROR_IO :				case YTPlayerEvent.PLAYER_ERROR_UNKNOWN :				case YTPlayerEvent.PLAYER_ERROR_VIDEO_NOT_FOUND_OR_PRIVATE :										break;			}		}						private function setReportingID():void 		{			sendVideoEvent( new BltVideoEvent( BltVideoEvent.UPDATE_VIDEO_ID, { videoID:videoReportingID, playerId:playerID }));		}						private function hideBuffering():void		{            sendVideoEvent( new BltVideoEvent( BltVideoEvent.HIDE_BUFFERING, { videoID:videoReportingID, playerId:playerID } ));		}		private function showBuffering():void		{            sendVideoEvent( new BltVideoEvent( BltVideoEvent.SHOW_BUFFERING, { videoID:videoReportingID, playerId:playerID } ));		}		private function videoComplete():void		{            clearInitValues();            handleVideoCompleteProps();            removeProgressListener();            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_COMPLETE, { videoID:videoReportingID, playerId:playerID } ));		}		private function onPlayerError(event:Event):void		{            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_ERROR, { videoID:videoReportingID, playerId:playerID } ));		}        /**         * Updates progress bar load bar, only works on progressive loads.         */        private function updateLoad():void        {            var bytesLoaded:Number = ( stream ) ? stream.bytesLoaded / stream.bytesTotal : 0;            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_BYTES_LOADED, { bytesLoaded:bytesLoaded, videoID:videoReportingID, playerId:playerID }));        }        /**         * Updates video progress bar.         */		private function updateProgress():void		{						var time:Number = ( videoProxy && videoProxy.currentTime ) ? videoProxy.currentTime : 0;			var pos:Number = time / ( videoDuration || 0 );            sendVideoEvent( new BltVideoEvent( BltVideoEvent.VIDEO_PROGRESS, { videoID:videoReportingID, playerId:playerID, progress:pos }));		}        /**         * Fires all outgoing events on both the player and the event broadcaster.         */        private function sendVideoEvent( event:BltVideoEvent )        {			if( event.type != BltVideoEvent.VIDEO_PROGRESS && event.type != BltVideoEvent.VIDEO_BYTES_LOADED ) reportVideoEvent( event.type );									if( videoTarget ) videoTarget.dispatchEvent( event );                                 var event2:BltVideoEvent;            if( !ignoreControls && broadcaster )            {                				event2 = new BltVideoEvent( event.type, event.data );                broadcaster.dispatchEvent( event2 );            }        }						private function reportVideoEvent( value:String ):void		{			enabler.reportCustomVariableCount1( "VIDEO EVENT :: " + value + " :: " + videoReportingID );		}        ////////////////////////////////////////////// PRIVATE METHODS //////////////////////////////////////////////////////////////////////////////////        /**         * Fired on enter frame, updates all enter frame methods.         */        private function updateVideo( e:Event ):void        {            e.stopImmediatePropagation();            updateProgress();            updateLoad();        }        /**         * Clears all initial player values once first video is complete or user input.         */        private function clearInitValues():void        {			isPlaying		= false;			initVideoPlayed = true;        }        /**         * On video complete checks for looping or close.         */        private function handleVideoCompleteProps():void        {            if( closeOnComplete )    destroy();            if( loopVideoNum != -1 ) loopVideo();        }        private function setListeners():void        {            videoTarget.addEventListener( Event.REMOVED_FROM_STAGE, destroy );						videoProxy.addEventListener("onStateChange", 							onPlayerStateChange );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_READY, 				eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_PLAY, 					eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_COMPLETE, 				eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_0_PERCENT, 			eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_25_PERCENT, 			eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_50_PERCENT, 			eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_75_PERCENT, 			eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_100_PERCENT, 			eventHandler );			videoProxy.addEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_0_PERCENT, 	eventHandler );			videoProxy.addEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_25_PERCENT, 	eventHandler );			videoProxy.addEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_50_PERCENT, 	eventHandler );			videoProxy.addEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_75_PERCENT, 	eventHandler );			videoProxy.addEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_100_PERCENT, 	eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_PAUSE, 				eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_REPLAY, 				eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_MUTE, 					eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_UNMUTE, 				eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_FULLSCREEN, 			eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_EXIT_FULLSCREEN, 		eventHandler );			videoProxy.addEventListener( YTPlayerEvent.VIDEO_QUALITY_CHANGE, 		eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR, 								eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR_EMBEDDED_PLAYBACK_NOT_ALLOWED, 	eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR_EMBEDDED_PLAYBACK_NOT_ALLOWED2, eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR_INVALID_PARAMETER, 				eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR_IO, 							eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR_UNKNOWN, 						eventHandler );			videoProxy.addEventListener( YTPlayerEvent.PLAYER_ERROR_VIDEO_NOT_FOUND_OR_PRIVATE, 	eventHandler );									trace( "SETTING LISTENERS IN PLAYER :: " + playerID + "   IGNORE CONTROLS :: " + ignoreControls );			            if( ignoreControls ) return;						trace( "SETTING CONTROLS :: " + playerID );            broadcaster = EventBroadcaster.getInstance();			            broadcaster.addEventListener( BltVideoEvent.MUTE_VIDEO, 	muteAudio );            broadcaster.addEventListener( BltVideoEvent.UNMUTE_VIDEO, 	unmuteAudio );            broadcaster.addEventListener( BltVideoEvent.PAUSE_VIDEO, 	pauseVideo );            broadcaster.addEventListener( BltVideoEvent.PLAY_VIDEO, 	playVideo );            broadcaster.addEventListener( BltVideoEvent.STOP_VIDEO, 	stopVideo );            broadcaster.addEventListener( BltVideoEvent.SEEK_VIDEO, 	seekVideo );        }        private function removeListeners():void        {            if( videoTarget ) videoTarget.removeEventListener( Event.REMOVED_FROM_STAGE, destroy );						videoProxy.removeEventListener( YTPlayerEvent.PLAYER_READY, 				eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_PLAY, 					eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_COMPLETE, 				eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_0_PERCENT, 				eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_25_PERCENT, 			eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_50_PERCENT, 			eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_75_PERCENT, 			eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_100_PERCENT, 			eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_0_PERCENT, 	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_25_PERCENT, 	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_50_PERCENT, 	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_75_PERCENT, 	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.AUTOPLAY_VIDEO_100_PERCENT,	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_PAUSE, 					eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_REPLAY, 				eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_MUTE, 					eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_UNMUTE, 				eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_FULLSCREEN, 			eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_EXIT_FULLSCREEN, 		eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.VIDEO_QUALITY_CHANGE, 		eventHandler );						videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR, 								eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR_EMBEDDED_PLAYBACK_NOT_ALLOWED, 	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR_EMBEDDED_PLAYBACK_NOT_ALLOWED2, 	eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR_INVALID_PARAMETER, 				eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR_IO, 								eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR_UNKNOWN, 						eventHandler );			videoProxy.removeEventListener( YTPlayerEvent.PLAYER_ERROR_VIDEO_NOT_FOUND_OR_PRIVATE, 		eventHandler );						if( !broadcaster ) return;						broadcaster.removeEventListener( BltVideoEvent.MUTE_VIDEO, 	muteAudio );            broadcaster.removeEventListener( BltVideoEvent.UNMUTE_VIDEO, unmuteAudio );            broadcaster.removeEventListener( BltVideoEvent.PAUSE_VIDEO, pauseVideo );            broadcaster.removeEventListener( BltVideoEvent.PLAY_VIDEO, 	playVideo );            broadcaster.removeEventListener( BltVideoEvent.STOP_VIDEO, 	stopVideo );            broadcaster.removeEventListener( BltVideoEvent.SEEK_VIDEO, 	seekVideo );						//broadcaster = null;        }    }}