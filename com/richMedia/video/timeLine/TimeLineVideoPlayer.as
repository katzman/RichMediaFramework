/** SSVideoPlayer * ------------------------------------------------------------------------------------- * @ description: wrapper for the site served video player. * @ usage: refer to documentation for usage. * @ developer: Neil Katz * @ version: 1.0.0  02.13.2014 * ------------------------------------------------------------------------------------- * */package com.richMedia.video.timeLine{	import com.richMedia.managers.ProgressEventManager;	import com.richMedia.dateUtils.TuneIn;	import com.richMedia.managers.VideoListManager;	import com.richMedia.constants.Constants;	import com.richMedia.events.RmAdEvent;	import com.richMedia.events.EventBroadcaster;	import com.richMedia.events.RmVideoEvent;	import flash.display.MovieClip;	import flash.display.MovieClip;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.EventDispatcher;	import flash.media.SoundMixer;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	[Event(name="videoReady"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoError"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoCleared"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoStarted"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoComplete"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoLoopComplete"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoProgress"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoPlaying"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoPaused"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoStopped"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoUnmuted"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoMuted"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="video_0_percent"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="video_25_percent"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="video_50_percent"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="video_75_percent"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="video_100_percent"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="showBuffering"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="hideBuffering"			,type="com.richMedia.events.RmVideoEvent")]	[Event(name="playWithSoundCalled"	,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoOnCuepoint"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoBytesLoaded"		,type="com.richMedia.events.RmVideoEvent")]	[Event(name="videoUpdated"		    ,type="com.richMedia.events.RmVideoEvent")]	public class TimeLineVideoPlayer extends EventDispatcher	{		////////////////////////////////////////////// PUBLIC VARS //////////////////////////////////////////////////////////////////////////////////		public var closeOnComplete	    : Boolean = false;		public var startMuted		    : Boolean = false;		public var ignoreControls       : Boolean = false;		public var initVideoPlayed      : Boolean = false;		public var videoSmoothing	    : Boolean = true;		public var pauseAtStart		    : Boolean = false;		public var loopVideoNum         : int = -1;		public var loopCount            : int = 0;		public var playerID             : String = Constants.PLAYER_DEFAULT_ID;		public var swfID                : String = Constants.SWF_DEFAULT_ID;		////////////////////////////////////////////// PRIVATE VARS //////////////////////////////////////////////////////////////////////////////////		private var videoPlaying		: Boolean = false;  ////// variable to know if the video is playing		private var initialLoad			: Boolean = false;	////// variable used for first video play		private var videoDuration		: Number;		private var videoProgressEvent  : String;		private var videoReportingID    : String = "timeLineVideo";		private var progressEvents_obj 	: Object;		private var listener_obj	    : Object;		private var metaData_obj	    : Object;		private var progressEventManager: ProgressEventManager;		private var broadcaster         : EventBroadcaster;		private var videoTarget         : MovieClip;		private var video               : Video;		private var stream			    : NetStream;		private var connection		    : NetConnection;		private var isPaused            : Boolean;		private var isMuted             : Boolean;		private var isLoadAndPlay		: Boolean;		/**		 * DCVideoPlayer Constructor		 * @param: _videoPlayer: is the DC VideoPlayer Object that is on the stage.		 * @param: _startMuted: starts video with no sound.		 * @param: _useTunein: use tunein component data to retrieve date coded video.		 * @param: _streaming: just tells it to use streaming or not.		 * @param: _streamingPath: is used if you have a separate path to be added for streaming, can also be added to the video path when they are added.		 */		public function TimeLineVideoPlayer( _videoTarget:MovieClip, _video:Video = null, _pausedAtStart:Boolean = true, _startMuted:Boolean = true )		{			trace("***************************************************");			trace("******** SITE SERVED VIDEO WRAPPER V 2.0.0 ********");			trace("***************************************************");			if( !_videoTarget )			{				trace("ALARM!!! ::: TIME LINE VIDEO PLAYER CALLED : NO VIDEO TARGET MC" );				return;			}			videoTarget         = _videoTarget;			video               = _video;			pauseAtStart        = _pausedAtStart;			videoDuration       = videoTarget.totalFrames;			startMuted          = _startMuted;			videoReportingID    = "timeLineVideo";		}		public function init( e:Event = null ):void		{			setListeners();			if( pauseAtStart && videoTarget ) videoTarget.gotoAndStop( 1 );			if( video ) video.smoothing = true;			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_READY, {videoID:videoReportingID, playerID:playerID} ));		}		public function destroy( e:Event = null ):void		{			//removeProgressListener();			//stopVideo();			//clearVideoPlayer();			//removeListeners();			//videoTarget         = null;			//progressEvents_obj  = null;		}        /**		 * add a percent value between 0 and 1 or a an actual time value, that fires a method when video reaches that point of the video.		 */		public function addProgressEvent( time:String, method:Function = null ):void		{			if( !progressEventManager ) progressEventManager = new ProgressEventManager();			progressEventManager.addProgressEvent( time, videoReportingID, method, false );		}        public function resetProgressEvents():void        {            if( !progressEventManager ) return;            progressEventManager.resetEvents();        }		////////////////////////////////////////////// PUBLIC METHODS :: REPLAY VIDEO //////////////////////////////////////////////////////////////////////////////////		public function replayVideo():void		{			trace( "\n\n\nREPLAY VIDEO CALLED :: LOOP COUNT: " + loopCount + "   LOOP NUM: " + loopVideoNum + "\n\n\n");			resetProgressEvents();			videoTarget.gotoAndPlay( getStartFrame() );			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_PLAYING, { videoID:videoReportingID, playerID:playerID } ));		}		private function getStartFrame():*		{			if( videoTarget['start'] ) return 'start';			if( videoTarget['video'] ) return 'video';			return 2;		}		public function replayWithSound():void		{			replayVideo();			clearInitValues();			unmuteAudio();			sendVideoEvent( new RmVideoEvent( RmVideoEvent.PLAY_WITH_SOUND_CALLED, {videoID:videoReportingID, playerID:playerID}));		}		////////////////////////////////////////////// PUBLIC METHODS :: VIDEO CONTROLS COMMANDS //////////////////////////////////////////////////////////////////////////////////		public function playVideo( e:RmVideoEvent = null ):void		{			if( e && e.data.playerID != playerID ) return;			trace("\n\n\nPLAY VIDEO CALLED ::: IS PAUSED ::: " + isPaused + "\n\n\n" );			if( !videoTarget )			{				trace("ALARM!!! ::: PLAY VIDEO CALLED : NO VIDEO TARGET MC" );				return;			}			if( isPaused )			{				videoTarget.play();			}			else			{				resetProgressEvents();				videoTarget.gotoAndPlay( getStartFrame() );			}			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_PLAYING, {videoID:videoReportingID, playerID:playerID} ));		}		public function setVideoVolume(_vol:Number):void		{			SoundMixer.soundTransform = new SoundTransform( _vol );		}		public function muteAudio( e:RmVideoEvent = null ):void		{			if( e && e.data.playerID != playerID ) return;			setVideoVolume( 0 );			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_MUTED, {videoID:videoReportingID, playerID:playerID} ));		}		public function unmuteAudio( e:RmVideoEvent = null ):void		{			if( e && e.data.playerID != playerID ) return;			setVideoVolume( 1 );			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_UNMUTED, {videoID:videoReportingID, playerID:playerID} ));			checkForReplay();		}		public function pauseVideo( e:RmVideoEvent = null ):void		{			if( e && e.data.playerID != playerID ) return;			if( !videoTarget )			{				trace("ALARM!!! ::: PAUSE VIDEO CALLED : NO VIDEO TARGET MC" );				return;			}			videoTarget.stop();			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_PAUSED, {videoID:videoReportingID, playerID:playerID} ));		}		public function stopVideo( e:RmVideoEvent = null ):void		{			if( !videoTarget )			{				trace("ALARM!!! ::: STOP VIDEO CALLED : NO VIDEO TARGET MC" );				return;			}			videoTarget.stop();			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_STOPPED, {videoID:videoReportingID, playerID:playerID} ));		}		public function seekVideo( e:RmVideoEvent, _seek:Number = 0 ):void		{			if( e && e.data.playerID != playerID ) return;			if( !videoTarget )			{				trace("ALARM!!! ::: SEEK VIDEO CALLED : NO VIDEO TARGET MC" );				return;			}			if ( e ) _seek = e.data.seekPos;			var _seekPos:Number = Math.ceil( videoDuration * _seek );			if( videoPlaying )			{				videoTarget.gotoAndPlay( _seekPos );			}			else			{				videoTarget.gotoAndStop( _seekPos );			}		}		/**		 * Sets video back to the start and pauses it.		 */		public function resetVideo():void		{			seekVideo( null, 0 );			pauseVideo();		}		/**		 * Skips video to end, can be called from right click menu once i figure it out.		 */		public function skipVideo( _skip:Number = .9 ):void		{			seekVideo( null, _skip );		}		////////////////////////////////////////////// PRIVATE METHODS //////////////////////////////////////////////////////////////////////////////////		/**		 * Loops video based on the loopVideoNum value.		 */		private function loopVideo():void		{			if( loopCount < loopVideoNum )			{				loopCount++;				replayVideo();			}			else			{				loopCount = 0;				loopVideoNum = -1;				sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_LOOP_COMPLETE, {videoID:videoReportingID, playerID:playerID} ));			}		}		/**		 * When unmute is called, it will check if it was started muted and the first video, and replay with sound.		 */		private function checkForReplay():void		{			if( !initVideoPlayed && startMuted )			{				replayWithSound();				clearInitValues();			}		}		private function addProgressListener():void		{			removeProgressListener();			videoTarget.addEventListener( Event.ENTER_FRAME, updateVideo );		}		private function removeProgressListener():void		{			videoTarget.removeEventListener( Event.ENTER_FRAME, updateVideo );		}		/**		 * Mutes video if startMuted is set and initVideoPlayed is false.		 */		private function isVideoMuted():void		{			if( !initVideoPlayed && startMuted ) muteAudio();			else unmuteAudio();		}		////////////////////////////////////////////// VIDEO EVENTS //////////////////////////////////////////////////////////////////////////////////		private function videoComplete():void		{			clearInitValues();			handleVideoCompleteProps();			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_COMPLETE, {videoID:videoReportingID, playerID:playerID} ));		}		/**		 * Updates video progress bar.		 */		private function updateProgress():void		{			var frame:int = ( videoTarget && videoTarget.currentFrame ) ? videoTarget.currentFrame : 0;			var pos:Number = frame / ( videoDuration || 0 );			if( pos == 1 )			{				videoComplete();				return;			}			if( pos == Infinity ) pos = 0;			sendVideoEvent( new RmVideoEvent( RmVideoEvent.VIDEO_PROGRESS, { videoID:videoReportingID, playerID:playerID, progress:pos }));			sendProgressEvent( pos );			checkForProgressCallback( pos );		}		private function checkForProgressCallback( _pos:Number = 0 ):void		{			if( !progressEventManager || !progressEventManager.getProgressList( videoReportingID )) return;			var eventList:Array = progressEventManager.getProgressList( videoReportingID );			var obj:Object;			var pos:Number;			var length:uint = eventList.length;			for( var i:uint = 0; i < length; i++ )			{				obj = eventList[i];				pos = _pos;				if( pos >= obj.time && !obj.fired )				{					obj.fired = true;					obj.callback( obj.value );				}			}		}		private function sendProgressEvent( pos:Number ):void		{			var event:RmVideoEvent;			var eventType:String;			if( pos < .25 )         eventType = RmVideoEvent.VIDEO_0_PERCENT;			else if( pos < .5 )     eventType = RmVideoEvent.VIDEO_25_PERCENT;			else if( pos < .75 )    eventType = RmVideoEvent.VIDEO_50_PERCENT;			else if( pos < .97 )    eventType = RmVideoEvent.VIDEO_75_PERCENT;			else                    eventType = RmVideoEvent.VIDEO_100_PERCENT;			if( eventType != videoProgressEvent )			{				event = new RmVideoEvent( eventType, { videoID:videoReportingID, playerID:playerID } );				sendVideoEvent( event );				videoProgressEvent = eventType;			}		}		/**		 * Fires all outgoing events on both the player and the event broadcaster.		 */		private function sendVideoEvent( event:RmVideoEvent )		{			videoStatus( event );			dispatchEvent( event );			dispatchEvent( new RmVideoEvent( RmVideoEvent.VIDEO_UPDATED, { event:event.type, videoID:videoReportingID, playerID:playerID } ));			if( ignoreControls ) return;			var event2:RmVideoEvent;			event2 = new RmVideoEvent( event.type, event.data );			broadcaster.dispatchEvent( event2 );		}		////////////////////////////////////////////// PRIVATE METHODS //////////////////////////////////////////////////////////////////////////////////		/**		 * Fired on enter frame, updates all enter frame methods.		 */		private function updateVideo( e:Event ):void		{			e.stopImmediatePropagation();			updateProgress();		}		public function videoStatus( e:RmVideoEvent ):void		{			switch ( e.type )			{				case RmVideoEvent.VIDEO_PLAYING:					isVideoMuted();					addProgressListener();					isPaused = false;					videoPlaying = true;					break;				case RmVideoEvent.VIDEO_STOPPED:				case RmVideoEvent.VIDEO_COMPLETE:					videoPlaying = false;					removeProgressListener();					break;				case RmVideoEvent.VIDEO_PAUSED:					videoPlaying = false;					isPaused = true;					removeProgressListener();					break;				case "NetStream.Play.Stop":					videoComplete();					break;			}		}		/**		 * Clears all initial player values once first video is complete or user input.		 */		private function clearInitValues():void		{			initVideoPlayed = true;			isPaused = false;		}		/**		 * On video complete checks for looping or close.		 */		private function handleVideoCompleteProps():void		{			trace( "\n\n\nVIDEO COMPLETE CALLED\n\n\n" );			if( closeOnComplete )    destroy();			if( loopVideoNum != -1 ) loopVideo();		}		private function setListeners():void		{			broadcaster = EventBroadcaster.getInstance();			videoTarget.addEventListener( Event.REMOVED_FROM_STAGE, destroy );			if( ignoreControls ) return;			broadcaster.addEventListener( RmVideoEvent.MUTE_VIDEO, muteAudio );			broadcaster.addEventListener( RmVideoEvent.UNMUTE_VIDEO, unmuteAudio );			broadcaster.addEventListener( RmVideoEvent.PAUSE_VIDEO, pauseVideo );			broadcaster.addEventListener( RmVideoEvent.PLAY_VIDEO, playVideo );			broadcaster.addEventListener( RmVideoEvent.STOP_VIDEO, stopVideo );			broadcaster.addEventListener( RmVideoEvent.SEEK_VIDEO, seekVideo );		}		private function removeListeners():void		{			videoTarget.removeEventListener( Event.REMOVED_FROM_STAGE, destroy );			broadcaster.removeEventListener( RmVideoEvent.MUTE_VIDEO, muteAudio );			broadcaster.removeEventListener( RmVideoEvent.UNMUTE_VIDEO, unmuteAudio );			broadcaster.removeEventListener( RmVideoEvent.PAUSE_VIDEO, pauseVideo );			broadcaster.removeEventListener( RmVideoEvent.PLAY_VIDEO, playVideo );			broadcaster.removeEventListener( RmVideoEvent.STOP_VIDEO, stopVideo );			broadcaster.removeEventListener( RmVideoEvent.SEEK_VIDEO, seekVideo );		}	}}