/** ProgressEventManager * ------------------------------------------------------------------------------------- * @ description: Handles video fullscreen, loads the fullscreen swf and passes the currently playing video to it. * @ developer: Neil Katz * @ version: 1.0.0  04.17.2015 * ------------------------------------------------------------------------------------- * */package com.richMedia.video{	import com.richMedia.components.DCAssetLoader;	import com.richMedia.events.RmAdEvent;	import com.richMedia.managers.NotificationManager;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.FullScreenEvent;	public class DCFullScreenComponent extends EventDispatcher	{		public static const FULLSCREEN_LOADED : String = 'fullScreenLoaded';		public static const FULLSCREEN_CLOSED : String = 'fullScreenClosed';		public static const FULLSCREEN_LOAD  : String = 'fullScreenLoad';		public static const FULLSCREEN_CLOSE : String = 'fullScreenClose';		private var fsLoader    : DCAssetLoader;		private var target      : MovieClip;		private var loadPath    : String;		private var loadedSwf   : MovieClip;		private var vidData     : String;		private var stage       : Stage;		public function DCFullScreenComponent( _stage : Stage, _loadPath : String = 'fullScreen.swf' )		{			if( !_stage )			{				throw new Error( "ALARM!!! :: FULLSCREEN COMPONENT :: CONSTRUCTOR :: NO VALID STAGE SET" );			}			target      = new MovieClip();			stage       = _stage;			loadPath    = _loadPath;			trace( "***********************************************************" );			trace( "************** FULL SCREEN COMPONENT V 1.0.0 **************" );			trace( "***********************************************************" );			init();		}		public function init() : void		{			NotificationManager.regisiterNotificationInterest( FULLSCREEN_CLOSE, closeFullScreen );			NotificationManager.regisiterNotificationInterest( FULLSCREEN_LOAD, showFullScreen );			stage.addEventListener( FullScreenEvent.FULL_SCREEN, stageUpdated );			fsLoader = new DCAssetLoader();			fsLoader.addEventListener( RmAdEvent.ASSET_LOAD_COMPLETE, fsLoadComplete );		}		public function destroy( e : Event = null ) : void		{			if( stage && loadedSwf && stage.contains( loadedSwf ) ) stage.removeChild( loadedSwf );			if( fsLoader ) fsLoader.destroy();			stage       = null;			fsLoader    = null;			loadedSwf   = null;			target      = null;		}		private function stageUpdated( event : FullScreenEvent ) : void		{			if( stage.displayState == StageDisplayState.FULL_SCREEN )			{				fsLoader.loadSwf( loadPath, null, { currentVideo:vidData });			}			else			{				closeFullScreen();			}		}		public function showFullScreen( vid:String ) : void		{			vidData = vid;			stage.displayState = StageDisplayState.FULL_SCREEN;		}		public function closeFullScreen( note : Object = null ) : void		{			if( stage )			{				if( stage.contains( loadedSwf ) ) stage.removeChild( loadedSwf );				stage.displayState = StageDisplayState.NORMAL;				stage.scaleMode = StageScaleMode.SHOW_ALL;				stage.align = StageAlign.TOP_LEFT;			}			NotificationManager.sendNotification( FULLSCREEN_CLOSED );		}		private function fsLoadComplete( e : RmAdEvent ) : void		{			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			loadedSwf = e.data as MovieClip;			stage.addChild( loadedSwf );			NotificationManager.sendNotification( FULLSCREEN_LOADED );		}	}}