/** VideoProgressComponent * ------------------------------------------------------------------------------------- * @ description: Progress bar video component built to work with video players. * @ usage: refer to documentation for usage. * @ developer: Neil Katz * @ version: 1.0.0  02.13.2014 * ------------------------------------------------------------------------------------- * */package com.richMedia.video{	import com.richMedia.constants.Constants;	import com.richMedia.events.EventBroadcaster;	import com.richMedia.events.RmVideoEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	public class VideoProgressComponent extends MovieClip	{		public var playerID         : String = Constants.PLAYER_DEFAULT_ID;		public var bar_mc 		    : MovieClip;		public var loadBar_mc 		: MovieClip;		public var progressBar_mc 	: MovieClip;		public var sliderBtn_mc 	: MovieClip;		private var sliderRect		: Rectangle;		private var sliderLimit		: int;		private var progressPos     : Number;		private var sliderPressed	: Boolean;		private var broadcaster     : EventBroadcaster;		private var bytesTotal      : Number;		public function VideoProgressComponent()		{			if( this.stage ) init();			else addEventListener( Event.ADDED_TO_STAGE, init );		}		private function init( e:Event = null ):void		{			removeEventListener( Event.ADDED_TO_STAGE, init );			broadcaster = EventBroadcaster.getInstance();			sliderBtn_mc    = this["sliderBtn_mc"];			bar_mc          = this["bar_mc"];			loadBar_mc      = this["loadBar_mc"];			progressBar_mc  = this["progressBar_mc"];			this.buttonMode = true;			loadBar_mc.mouseEnabled = false;			progressBar_mc.mouseEnabled = false;			progressBar_mc.width = 0;			loadBar_mc.visible = false;			loadBar_mc.scaleX = 0;			sliderLimit = Math.round ( bar_mc.width - sliderBtn_mc.btn_mc.width );			sliderRect = new Rectangle ( 0, 0, sliderLimit, 0 );			setListeners();		}		private function destroy( e:Event ):void		{			removeListeners();			broadcaster     = null;			sliderLimit     = null;			sliderRect      = null;			sliderBtn_mc    = null;			bar_mc          = null;			loadBar_mc      = null;			progressBar_mc  = null;		}		private function btnEvents( e:MouseEvent ):void		{			switch( e.type )			{				case MouseEvent.MOUSE_DOWN:					if( e.target == sliderBtn_mc ) startDragging();					break;				case MouseEvent.MOUSE_OVER:					if( e.target == sliderBtn_mc ) btnOver();					break;				case MouseEvent.MOUSE_OUT:					if( e.target == sliderBtn_mc ) btnOut();					break;				case MouseEvent.MOUSE_UP:					stopDragging();					break;				case MouseEvent.CLICK:					if( e.target == bar_mc ) videoSeekToPoint();					break;			}		}		private function startDragging():void		{			sliderPressed = true;			sliderBtn_mc.startDrag( false, sliderRect );		}		private function stopDragging():void		{			sliderPressed = false;			sliderBtn_mc.stopDrag();		}		private function btnOut():void		{			sliderBtn_mc.gotoAndStop( "out" );		}		private function btnOver():void		{			sliderBtn_mc.gotoAndStop( "over" );		}		private function updateControls( e:RmVideoEvent ):void		{			e.stopImmediatePropagation();			if( e.data.playerID != playerID ) return;			var pos:Number = e.data.progress;			updateSlider ( pos );			updateProgressBar();		}		private function resetControls( e:RmVideoEvent ):void		{			e.stopImmediatePropagation();			if( e.data.playerID != playerID ) return;			loadBar_mc.scaleX = 0;			progressBar_mc.width = 0;			sliderBtn_mc.x = 0;		}		private function updateProgressBar():void		{			progressBar_mc.width = progressPos;		}		private function updateLoadBar( e:RmVideoEvent ):void		{			e.stopImmediatePropagation();			if( e.data.playerID != playerID ) return;			loadBar_mc.visible = true;			loadBar_mc.scaleX = e.data.bytesLoaded;		}		private function videoSeekToPoint():void		{			var _seekValue:Number = ( bar_mc.mouseX ) / sliderLimit;			broadcaster.dispatchEvent( new RmVideoEvent( RmVideoEvent.SEEK_VIDEO, { seekPos:_seekValue, playerID:playerID }));		}		private function updateSlider( pos:Number ):void		{			if ( !sliderPressed )			{				progressPos = Math.floor ( sliderLimit * pos );				sliderBtn_mc.x = progressPos;			}			else			{				var _seekValue:Number = ( sliderBtn_mc.x ) / sliderLimit;				broadcaster.dispatchEvent( new RmVideoEvent( RmVideoEvent.SEEK_VIDEO, { seekPos:_seekValue, playerID:playerID }));			}		}		public function setListeners():void		{			sliderBtn_mc.mouseChildren = false;			addEventListener( Event.REMOVED_FROM_STAGE, destroy );			stage.addEventListener( MouseEvent.MOUSE_UP,   btnEvents );			addEventListener( MouseEvent.MOUSE_DOWN,       btnEvents );			addEventListener( MouseEvent.MOUSE_OVER,       btnEvents );			addEventListener( MouseEvent.MOUSE_OUT,        btnEvents );			addEventListener( MouseEvent.CLICK,            btnEvents );			broadcaster.addEventListener( RmVideoEvent.VIDEO_COMPLETE,        resetControls );			broadcaster.addEventListener( RmVideoEvent.VIDEO_CLEARED,         resetControls );			broadcaster.addEventListener( RmVideoEvent.VIDEO_PROGRESS,        updateControls );			broadcaster.addEventListener( RmVideoEvent.VIDEO_BYTES_LOADED,    updateLoadBar );		}		public function removeListeners():void		{			removeEventListener( Event.REMOVED_FROM_STAGE, destroy );			stage.removeEventListener( MouseEvent.MOUSE_UP,   btnEvents );			removeEventListener( MouseEvent.MOUSE_DOWN,       btnEvents );			removeEventListener( MouseEvent.MOUSE_OVER,       btnEvents );			removeEventListener( MouseEvent.MOUSE_OUT,        btnEvents );			removeEventListener( MouseEvent.CLICK,            btnEvents );			broadcaster.removeEventListener( RmVideoEvent.VIDEO_COMPLETE,        resetControls );			broadcaster.removeEventListener( RmVideoEvent.VIDEO_CLEARED,         resetControls );			broadcaster.removeEventListener( RmVideoEvent.VIDEO_PROGRESS,        updateControls );			broadcaster.removeEventListener( RmVideoEvent.VIDEO_BYTES_LOADED,    updateLoadBar );		}	}}