package com.blt.weatherComponent.mediaMind {			//import eyeblaster.*;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.external.ExternalInterface;	import flash.system.Security;		public class WeatherBlock extends EventDispatcher		{				public static const MIN_TEMP_F		: String = "minTempF";		public static const MAX_TEMP_F		: String = "maxTempF";		public static const TEMP_F			: String = "tempF";		public static const AVG_TEMP_F		: String = "avgTempF";		public static const FEELS_LIKE_F	: String = "feelslikeF";				public static const MIN_TEMP_C		: String = "minTempC";		public static const MAX_TEMP_C		: String = "maxTempC";		public static const TEMP_C			: String = "tempC";		public static const AVG_TEMP_C		: String = "avgTempC";		public static const FEELS_LIKE_C	: String = "feelslikeC";				public static const WEATHER			: String = "weather";		public static const IS_DAY			: String = "isDay";				public static const WINDSPD_MPH		: String = "windSpeedMPH";		public static const WINDSPD_KPH		: String = "windSpeedKPH";				public static const CLOUDS_CODED	: String = "cloudsCoded";		public static const WEATHER_CODED	: String = "weatherPrimaryCoded";		public static const WEATHER_PRIMARY	: String = "weatherPrimary";				public static const DATE_TIME_ISO	: String = "dateTimeISO";		public static const VALID_TIME		: String = "validTime";		public static const TIME_STAMP		: String = "timeStamp";		public static const DAY_NUMBER		: String = "dayNumber";		public static const MONTH_NUMBER	: String = "monthNumber";				public static const DAY_NAME		: String = "dayName";		public static const MONTH_NAME		: String = "monthName";				public static const DATA_COMPLETE	: String = "dataComplete";		public static const DATA_ERROR		: String = "dataError";				// weather return values		public static const TYPE_WIND		: String = "wind";		public static const TYPE_CLOUDY		: String = "cloudy";        public static const TYPE_CLEAR		: String = "clear";		public static const TYPE_SUNNY		: String = "sun";		public static const TYPE_COLD		: String = "cold";		public static const TYPE_HOT		: String = "hot";		public static const TYPE_RAIN		: String = "rain";		public static const TYPE_SNOW		: String = "snow";		public static const TYPE_HAIL		: String = "hail";		public static const TYPE_DEFAULT	: String = "default";				////////////////////// the following values can be passed from the fla. ////////////////		// Set Weather API Client ID		public var wthr_id			: String = "yxn54qc6cWZjTiwxODifi";				// Set Weather API Client Secret		public var wthr_scrt		: String = "2EUXzic6spRg2njqm7ZljRiA8pXYi0sKik3hYNHg";				// Set Location of Weather API Script - This example uses the Observations method				public var wthr_svr			: String = "http://api.aerisapi.com/batch/:auto?requests=/places,/observations%3Fradius=100miles%26query=temp:-90,/forecasts%3Flimit=3";				public var ssl_wthr_svr		: String = "https://api.aerisapi.com/batch/:auto?requests=/places,/observations%3Fradius=100miles%26query=temp:-90,/forecasts%3Flimit=3";					// use these for testing specific zip locations        public var testLocation         : String;		public var wthr_svr_location	: String = "http://api.aerisapi.com/batch/[location]?requests=/places,/observations%3Fradius=100miles%26query=temp:-90,/forecasts%3Flimit=3";		//public var ssl_wthr_svr		: String = "https://api.aerisapi.com/batch/M3C0C1?requests=/places,/observations%3Fradius=100miles%26query=temp:-90,/forecasts%3Flimit=3";					public var useSSL			: Boolean; // if true will use ssl_wthr_svr, set in fla. 		public var getDayCount		: uint = 1; // amount of days to parse and return. 		public var useLiveDomain	: Boolean; // use live key and secret instead of MM testing.        public var useTestData      : Boolean;				////////////////////////////////////////////////////////////////////////////////////////								private var wthr_city		: String;		private var wthr_state		: String;				private var weatherList		: Array;				public var currentCity		: String; 								// constructor		public function WeatherBlock () 		{						// Display Block info			trace ( 'NEILS MM Weather Wrapper - V1.05' );						// Allow for cross domain use			Security.allowDomain ( '*' );		}						public function init():void		{			if( useTestData )            {                do_wthr_response( Config.TestData );            }			// Check Config file for Policy file			var icon_svr_pol:String = Config.WTHR_ICON_SVR || 'http://hosting.serving-sys.com/crossdomain.xml';						// sets path to ssl if value is set to true in fla.            if( testLocation )            {                wthr_svr = wthr_svr_location.split('[location]').join( testLocation );            }            else            {			    wthr_svr = ( useSSL ) ? ssl_wthr_svr : wthr_svr;            }			// Allow Hosting Domain Images, don't believe we need this, not using any of their images. 			Security.loadPolicyFile( icon_svr_pol );						// external interface not available it will fire the data error, the fla should load up test data. 						if ( ExternalInterface.available ) 			{				ExternalInterface.addCallback( "do_JSONP_request", do_JSONP_request );				ExternalInterface.addCallback( "do_wthr_response", do_wthr_response );				do_weather_request ();				}			else			{				dispatchEvent ( new Event ( DATA_ERROR ));			}				}		// Handle Weather Request		private function do_weather_request ():void		{						// sets values based if they are in the config and we are using the live domain.			wthr_id = ( useLiveDomain && Config.WTHR_CLIENT_ID_STRING ) ? Config.WTHR_CLIENT_ID_STRING : wthr_id;			wthr_scrt = ( useLiveDomain && Config.WTHR_CLIENT_SECRET_STRING ) ? Config.WTHR_CLIENT_SECRET_STRING : wthr_scrt;									// javascript set on the hosting html page. 			var JSONP:String = "var mmWeatherBlock = new Object(); ";			JSONP += "mmWeatherBlock.flashID = '" + EBBase.urlParams.ebFlashID + "'; ";			JSONP += "mmWeatherBlock.init = false; ";			JSONP += "mmWeatherBlock.do_JSONP_request = function ( ) { try { var ebFlashObj = document.getElementById ( mmWeatherBlock.flashID ); } catch ( err ) { }; ebFlashObj.do_JSONP_request ( ); };";			JSONP += "mmWeatherBlock.do_wthr_request = function ( _arg ) { mmWeatherBlock.scrpt = document.createElement( 'script' ); mmWeatherBlock.scrpt.src = _arg; document.body.appendChild ( mmWeatherBlock.scrpt ); };";			JSONP += "mmWeatherBlock.wthr_callback = function ( _obj ) { if ( mmWeatherBlock.init == false ) { try { var ebFlashObj = document.getElementById ( mmWeatherBlock.flashID ); ebFlashObj.do_wthr_response ( _obj ); } catch ( err ) { }; mmWeatherBlock.init = true; } };";			JSONP += "mmWeatherBlock.do_JSONP_request ( );";			ExternalInterface.call ( "eval", JSONP );									}						public function do_JSONP_request ( calledFromFlash:Boolean = false ):void 		{			// this was also being called from the javascript set on the page, wanted to make sure it was only called once from flash. 			if ( !calledFromFlash ) return;						var req_str:String = wthr_svr + "&client_id=" + wthr_id + "&client_secret=" + wthr_scrt + "&callback=mmWeatherBlock.wthr_callback";									ExternalInterface.call("mmWeatherBlock.do_wthr_request", req_str ); 			}						// Handle Weather Response from Javascript		public function do_wthr_response ( _obj:Object ):void 		{			trace ( "WEATHER RESPONSE ::: " + _obj.success );			trace ( "PLACE: " + _obj.response.responses[0].response.place );			trace_r ( _obj );						var weather:Array = [];						if ( _obj.success == true || _obj.success == "true" ) 			{												// if we have a place value then parse data.				if ( _obj.response.responses[0].response.place )				{					// check for data then add to weather array.										// first data object is from observations, current day. 					if ( _obj.response.responses[1].response.ob ) weather.push ( _obj.response.responses[1].response.ob );										// second and third data objects are from forecasts, 0 is day one, 1 is day two. 					if ( _obj.response.responses[2] && _obj.response.responses[2].response[0] && _obj.response.responses[2].response[0].periods[1] ) weather.push ( _obj.response.responses[2].response[0].periods[1] );					if ( _obj.response.responses[2] && _obj.response.responses[2].response[0] && _obj.response.responses[2].response[0].periods[2] ) weather.push ( _obj.response.responses[2].response[0].periods[2] );										// creates the object vo list. 					buildWeatherObjectList ( weather );										// had more going on for setting the city value, kept the method incase it changes. 					setCityValue ( _obj.response.responses[0].response.place );										// tells the fla that data is ready to use. 					dispatchEvent ( new Event ( DATA_COMPLETE ));										}				else				{					dispatchEvent ( new Event ( DATA_ERROR ));				}			} 			else 			{				trace ( _obj.error.description );				dispatchEvent ( new Event ( DATA_ERROR ));			}		}							// had more going on for setting the city value, kept the method incase it changes. 		private function setCityValue ( obj:Object ):void 		{            currentCity = obj.name;		}						private function buildWeatherObjectList ( _obj:Array ):void 		{			// init the weatherList array. 			weatherList = [];						trace ( "BUILD WEATHER OBJECT LIST" );						// WeatherItemVO is a typed object that parses the weather data object into an expected structure. 			var vo:WeatherItemVO;						for ( var i:uint = 0; i < getDayCount; i++ ) 			{				vo = new WeatherItemVO();				vo.setValues( _obj[i] );				weatherList.push ( vo );							}		}        public function getWeatherData( day:uint = 0 ):String        {            return String( currentCity + "\n" + weatherList[day].dataValues ).toUpperCase();        }				/**		 * Day value is 0 -> 2, 0 is current day and 2 is three days ahead. Returns WeatherItemVO which is a typed object.   		 		 */				public function getWeatherByDay( day:uint ):WeatherItemVO		{			return weatherList[day];		}						/**		 * day value is 0 -> 2, 0 is current day and 2 is three days ahead. Returns WeatherItemVO which is a typed object. 		 * prop value is a static string for the weather property, they are static const listed in this class. 		 * Both values must be passed.  		 		 */				public function getWeatherPropertyById( day:int = -1, id:String = "null" ):String		{			// ensures both values are passed.			if ( day == -1 || id == "null" ) return null;			trace("AFTER ::: GET WEATHER BY ID :: DAY: " + day + "   ID: " + id +"  =  " + weatherList[day][id] );						return weatherList[day][id];		}						// Handle Load Errors		public function ioeError ( e:IOErrorEvent ):void		{			// Display Errors			trace("ieo error " + e);		}	}}