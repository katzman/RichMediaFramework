package com.richMedia.dateUtils{	import com.richMedia.dateUtils.vo.DateVO;	import com.richMedia.utils.Utils;	public class TuneInNano	{		///////////////////////////// PUBLIC VARS /////////////////////////////		public static var isReady               : Boolean;		///////////////////////////// PRIVATE VARS /////////////////////////////		private static var dates 	    : Array;		private static var dateResults 	: Object = {};		private static var testToday	: Date;		///////////////////////////// PUBLIC METHODS /////////////////////////////		public static function addDefault( _id:String = "", _frame:uint = 0 ):void		{			if( !dateResults ) dateResults = {};			dateResults.defaultFrame = _frame;			dateResults.defaultId = _id;		}		public static function addDate( year:int, month:int, day:int, hours:int = 0, minutes:int = 0, _id:String = "", _frame:uint = 0 ):void		{			if ( !dates ) dates = [];			var _date:DateVO = new DateVO();			_date.year = year;			_date.month = month;			_date.day = day;			_date.hours = hours;			_date.minutes = minutes;			var date:Date = getDate( _date );			var date_obj:Object = { date:date, time:date.time, frame:_frame, id:_id };			dates.push( date_obj );		}		public static function get currentframe():uint		{			if( !isReady ) parseDate();			return dateResults.frameNum || dateResults.defaultFrame;		}		public static function get currentId():String		{			if( !isReady ) parseDate();			if( !dateResults )			{				trace( "ALARM!!! :: TUNE IN GET CURRENT ID CALLED :: NO DEFAULT DATES ARRAY, GET CURRENT TUNE IN ID BY PASSING SWF ID TO getCurrentIdBySwfID" );				return null;			}			return dateResults.id || dateResults.defaultId;		}		public static function setTestDateByDate( year:int, month:int, day:int, hours:int = 0, minutes:int = 0, _id:String = "", _frame:uint = 0 ):void		{			if ( !dates ) dates = [];			var _date:DateVO = new DateVO();			_date.year = year;			_date.month = month;			_date.day = day;			_date.hours = hours;			_date.minutes = minutes;			testToday = getDate( _date );		}		public static function parseDate():void		{			if ( !dates )			{				trace( "ALARM!!! :: TUNE IN PARSE DATE CALLED :: NO DATES ARRAY" );				return;			}			if( !dateResults ) dateResults = {};			dates.sortOn( "time", Array.NUMERIC );			var length:uint = dates.length;			var todayTime:Number = todayCheckTime;			var checkTime:Number;			var date_obj:Object;			for ( var i:uint = 0; i < length; i++ )			{				date_obj = dates[i];				if( !date_obj ) continue;				checkTime = getTime( date_obj.date );				if( checkTime <= todayTime )				{					dateResults.id = date_obj.id;					dateResults.frameNum = date_obj.frame;				}				else				{					break;				}			}			isReady = true;			trace("***************************************************");			trace("********** TUNE IN DATE MANAGER LITE V 1.0.0 ******");			trace("***************************************************");		}		///////////////////////////// PRIVATE METHODS /////////////////////////////		private static function getDate( _obj:DateVO ):Date		{			//object properties { year:2014, month:4, day:14, hours:14, minutes:30 }			if( !_obj ) return null;			var year:int 	= _obj.year;			var month:int 	= _obj.month -1;			var day:int 	= _obj.day;			var hour:int 	= _obj.hours || 0;			var minute:int 	= _obj.minutes || 0;			var date:Date 	= new Date( year, month, day, hour, minute );			return date;		}		private static function get todayCheckTime():Number		{			var time:Number = today.time;			return time;		}		private static function getTime( date:Date ):Number		{			var result:Date = new Date( date.time );			result.setTime( date.time );			return result.time;		}		private static function get today():Date		{			if( testToday && Utils.getPlayerType() != Utils.PLAYER_PLUGIN )			{				trace( "\n\n\nALARM!!! TEST DATE SET IN TUNE IN :: DISABLE BEFORE GOING LIVE\n\n\n" );				return testToday;			}			return new Date();		}	}}