/** MouseEventManager * ------------------------------------------------------------------------------------- * @ description: for adding mouse events to display objects based on their instance name and methods. * @ usage: var mouseManger:MouseEventManager = new MouseEventManager( this ); * mouseManager.addButton( "btnName", clickFunction, overFunction, outFunction ); * @ developer: Neil Katz * @ version: 1.0.0  04.13.2014 * ------------------------------------------------------------------------------------- * */package com.richMedia.managers{    import flash.display.DisplayObject;    import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;    public class MouseEventManager	{        public var debug		: Boolean;				private var targetMC    : MovieClip;        private var btnList     : Object;				public function MouseEventManager( _target:DisplayObject )        {			if( !_target )			{				throw new Error( "ALARM!!! :: MOUSE EVENT MANAGER :: CONSTRUCTOR :: NO TARGET DISPLAY OBJECT SET" );			}												trace("***************************************************");			trace("*********** MOUSE EVENT MANAGER V 2.0.0 ***********");			trace("***************************************************");			            targetMC = _target as MovieClip;            setListeners();        }	    public function destroy( e:Event = null ):void	    {		    removeListeners();		    targetMC = null;		    btnList = null;	    }        /**         * @param _btn String btn name         * @param _click Function btn click function         * @param _over Function btn over function         * @param _out Function btn out function         */        public function addButton( _btn:String, _click:Function = null, _over:Function = null, _out:Function = null ):void        {            if( !_btn )            {                throw new Error( "ALARM!!! :: MOUSE EVENT MANAGER :: ADD BUTTON :: NO BTN NAME PASSED" );            }            if( !btnList ) btnList = {};            btnList[_btn] = { click:_click, over:_over, out:_out };        }        /**         * @param _btns String btn name         * @param _click Function btn click function         * @param _over Function btn over function         * @param _out Function btn out function         */		public function addButtons( _btns:Array, _click:Function = null, _over:Function = null, _out:Function = null ):void		{			if( !_btns || _btns.length == 0 )			{				throw new Error( "ALARM!!! :: MOUSE EVENT MANAGER :: ADD BUTTONS :: NO BTN DATA PASSED" );			}						if( !btnList ) btnList = {};						var btn:String;			var length:uint = _btns.length;			for( var i:uint = 0; i < length; i++ )			{				btn = _btns[i];				if( !btn ) continue; // skips if no data. 								btnList[btn] = { click:_click, over:_over, out:_out };			}					}        /**         * @param _click Function btn click function         * @param _over Function btn over function         * @param _out Function btn out function         */	    public function addNullButton( _click:Function = null, _over:Function = null, _out:Function = null ):void	    {		    if( !btnList ) btnList = {};		    btnList["null"] = { click:_click, over:_over, out:_out };	    }        private function outBtnEvent( e:MouseEvent ):void        {            if( debug ) trace( "\n\nMOUSE EVENT MANAGER ::: BTN OUT ::: " + e.target.name + "\n\n" );            if( btnList == null ) return;            if( btnList[e.target.name] && btnList[e.target.name].out )            {                btnList[e.target.name].out( e.target );            }            else if( btnList["null"] && btnList["null"].out )            {                btnList["null"].out();            }        }        private function overBtnEvent( e:MouseEvent ):void        {			if( debug ) trace( "\n\nMOUSE EVENT MANAGER ::: BTN OVER ::: " + e.target.name );            if( btnList == null ) return;            if( btnList[e.target.name] && btnList[e.target.name].over )            {                btnList[e.target.name].over( e.target );            }            else if( btnList["null"] && btnList["null"].over )            {                btnList["null"].over();            }        }        private function clickBtnEvent( e:MouseEvent ):void        {			if( debug ) trace( "\n\nMOUSE EVENT MANAGER ::: BTN CLICKED ::: " + e.target.name + "\n\n" );	        if( btnList == null ) return;            if( btnList[e.target.name] && btnList[e.target.name].click )	        {		        btnList[e.target.name].click( e.target );	        }            else if( btnList["null"] && btnList["null"].click )            {                btnList["null"].click();            }        }        private function setListeners():void        {            targetMC.buttonMode = true;            targetMC.addEventListener( Event.REMOVED_FROM_STAGE, destroy );            targetMC.addEventListener( MouseEvent.CLICK,        clickBtnEvent );            targetMC.addEventListener( MouseEvent.MOUSE_OVER,   overBtnEvent );            targetMC.addEventListener( MouseEvent.MOUSE_OUT,    outBtnEvent );        }	    private function removeListeners():void	    {		    if( !targetMC ) return;            targetMC.removeEventListener( Event.REMOVED_FROM_STAGE, destroy );		    targetMC.removeEventListener( MouseEvent.CLICK,         clickBtnEvent );		    targetMC.removeEventListener( MouseEvent.MOUSE_OVER,    overBtnEvent );		    targetMC.removeEventListener( MouseEvent.MOUSE_OUT,     outBtnEvent );	    }    }}