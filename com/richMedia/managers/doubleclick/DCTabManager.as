/** ProgressEventManager * ------------------------------------------------------------------------------------- * @ description: acts as a mini model for video progress events.    * @ developer: Neil Katz * @ version: 1.0.0  04.13.2014 * ------------------------------------------------------------------------------------- * */package com.richMedia.managers.doubleclick{	import com.richMedia.managers.*;	import com.richMedia.events.RmAdEvent;	import com.richMedia.managers.doubleclick.DCTrackingManager;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	public class DCTabManager	{		public var currentTab   : DisplayObject;		private var mouseManager: MouseEventManager;		private var tabIds      : Array;		private var tabs 	    : Object;		private var target      : DisplayObject;		public function DCTabManager( _target:DisplayObject )		{			if( !_target )			{				throw new Error( "ALARM!!! :: PANEL MANAGER :: CONSTRUCTOR :: NO TARGET DISPLAYOBJECT SET" );			}			target = _target as MovieClip;			trace("***************************************************");			trace("*************** TAB MANAGER V 1.0.0 ***************");			trace("***************************************************");		}		public function init():void		{			if( !tabs || !tabIds )			{				trace( "ALARM!!! INIT CALLED ON PANEL MANAGER, NO TABS HAVE BEEN ADDED, MAKE SURE TABS ARE ADDED BEFORE CALLING INIT" );				return;			}			target.addEventListener( Event.REMOVED_FROM_STAGE, destroy );			mouseManager = new MouseEventManager( target );			mouseManager.addButtons( tabIds, tabSelected, tabOver, tabOut );		}		public function destroy( e:Event = null ):void		{			if( target ) target.removeEventListener( Event.REMOVED_FROM_STAGE, destroy );			if( mouseManager ) mouseManager.destroy();			target = null;			tabIds = null;			tabs = null;		}		// ######################## ADD TAB METHOD #############################		/**		 * Adds and exit using the button instance name as a key and the exitObj is the exit and optional counter value associated with that button.		 * @param _btnId, A String that is the button's actual instance name that it was given in flash.		 * @param _counter, A String that defines a counter tracking value, if it's included it will be tracked otherwise ignored.		 * @param _click, A Function that will fire when the tab is clicked, it will return the btn displayObject to the method.		 * @param _over, A Function that will fire when the tab is rolled over, it will return the btn displayObject to the method.		 * @param _out, A Function that will fire when the tab is rolled out, it will return the btn displayObject to the method.		 * @example		 * <listing version="3.0">		 * DCTabManager.addTab( btn.name, btnClicked, btnOver, btnOut, "track button clicked" );		 * </listing>		 */		public function addTab( _btnId:String, _click:Function = null, _over:Function = null, _out:Function = null, _counter:String = '' ):void		{			if( !_btnId )			{				trace( "ALARM!!! ADD TAB MUST INCLUDE A TAB BUTTON ID" );				return;			}			if( !tabs ) tabs = {};			if( !tabs[_btnId] ) tabs[_btnId] = { click:_click, over:_over, out:_out, counter:_counter };			if( !tabIds ) tabIds = [];			tabIds.push( _btnId );		}		// ######################## TAB SELECTED METHOD #############################		/**		 * When the tab is clicked it will fire this method, it will check the properties are attached to this button instance and fire them.		 * This method can also be fired from the fla for setting an inital tab, but you must pass the actual button DisplayObject.		 * @param btn, this is the selected button display object that will be returned by the MouseEventManager.		 * @example		 * <listing version="3.0">		 * DCTabManager.tabSelected( btn );		 * </listing>		 */		public function tabSelected( btn:DisplayObject ):void		{			trace( "TAB MANAGER TAB SELECTED :: " + btn.name );			// makes sure button is on the tab list.			if( !tabs || !tabs[btn.name] ) return;			// makes sure tab isn't already selected.			if( currentTab && currentTab == btn ) return;			var item:Object = tabs[btn.name];			// if click method exits, it fires it.			if( item.click ) item.click( btn );			// set it's state to over if it's not already.			tabOver( btn );			// if tracking counter will track it.			if( item.counter ) trackItem( item.counter );			updateTabs( btn );		}		// ######################## TAB ROLLED OVER METHOD #############################		/**		 * When the tab is rolled over it will fire this method, it will check the properties are attached to this button instance and fire them.		 * @param btn, this is the rolled over button display object that will be returned by the MouseEventManager.		 */		private function tabOver( btn:DisplayObject ):void		{			if( !tabs || !tabs[btn.name] ) return;			trace( "TAB MANAGER TAB OVER :: " + btn.name + "   " + btn['rollOver'] );			if( btn['rollOver'] ) btn['rollOver']();			btn['rollOver']();			var item:Object = tabs[btn.name];			if( item.over ) item.over( btn );		}		// ######################## TAB ROLLED OUT METHOD #############################		/**		 * When the tab is rolled out it will fire this method, it will check the properties are attached to this button instance and fire them.		 * @param btn, this is the rolled out button display object that will be returned by the MouseEventManager.		 */		private function tabOut( btn:DisplayObject ):void		{			if( !tabs || !tabs[btn.name] ) return;			if( currentTab && currentTab == btn ) return;			var item:Object = tabs[btn.name];			if( btn['rollOut'] ) btn['rollOut']( null, true );			if( item.out ) item.out( btn );		}		// ######################## UPDATE TABS METHOD #############################		/**		 * This method will unselect the current tab if there is one and set the currentTab value to the new selected tab.		 * @param btn, this is the selected button display object.		 */		private function updateTabs( btn:DisplayObject ):void		{			if( currentTab && tabs[currentTab.name].out ) tabs[currentTab.name].out( currentTab );			if( currentTab && currentTab['rollOut'] ) currentTab['rollOut']( null, true );			currentTab = btn;		}		// ######################## TRACK ITEM METHOD #############################		/**		 * This method will fire a counter if one was added to the currently selected button.		 * @param _counter, String tracking value.		 */		private function trackItem( _counter:String ):void		{			DCTrackingManager.trackCounter( _counter )		}	}}