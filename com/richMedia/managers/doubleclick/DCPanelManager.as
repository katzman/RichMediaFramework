/** ProgressEventManager * ------------------------------------------------------------------------------------- * @ description: acts as a mini model for video progress events.    * @ developer: Neil Katz * @ version: 1.0.0  04.13.2014 * ------------------------------------------------------------------------------------- * */package com.richMedia.managers.doubleclick{	import com.richMedia.components.DCAssetLoader;	import com.richMedia.events.RmAdEvent;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	public class DCPanelManager	{		public var loadComplete : Function;		public var currentPanel : MovieClip;		private var tabManager  : DCTabManager;		private var tabIds      : Array;		private var panelLoader : DCAssetLoader;		private var tabs 	    : Object;		private var target      : MovieClip;		private var loadTarget  : MovieClip;		private var useLoader   : Boolean;		private var currentTrack: String;		public function DCPanelManager( _target:DisplayObject, _useLoader:Boolean = false, _loadTarget:DisplayObject = null, _loadComplete:Function = null )		{			if( !_target )			{				throw new Error( "ALARM!!! :: PANEL MANAGER :: CONSTRUCTOR :: NO TARGET DISPLAYOBJECT SET" );			}			target       = _target as MovieClip;			loadTarget   = _loadTarget as MovieClip;			useLoader    = _useLoader;			loadComplete = _loadComplete;			trace("***************************************************");			trace("************** PANEL MANAGER V 1.0.0 **************");			trace("***************************************************");		}		public function init():void		{			if( useLoader )			{				panelLoader = new DCAssetLoader();				panelLoader.addEventListener( RmAdEvent.ASSET_LOAD_COMPLETE, panelLoadComplete );			}			target.addEventListener( Event.REMOVED_FROM_STAGE, destroy );			setTabs();		}		public function destroy( e:Event = null ):void		{			if( target ) target.removeEventListener( Event.REMOVED_FROM_STAGE, destroy );			clearPrevPanel();			if( tabManager ) tabManager.destroy();			if( panelLoader ) panelLoader.destroy();			loadComplete = null;			loadTarget = null;			target = null;			tabIds = null;			tabs = null;		}		private function panelLoadComplete( e:RmAdEvent ) : void		{			clearPrevPanel();			currentPanel = e.data as MovieClip;			if( loadComplete != null ) loadComplete( currentPanel );		}				/**		 *		 */		public function addTab( id:String, path:String = '', track:String = '', _click:Function = null, _over:Function = null, _out:Function = null ):void		{			if( !id )			{				trace( "ALARM!!! ADD TAB MUST INCLUDE A TAB BUTTON ID" );				return;			}			if( !tabs ) tabs = {};			if( !tabs[id] ) tabs[id] = { path:path, track:track, click:_click, over:_over, out:_out };			if( !tabIds ) tabIds = [];			tabIds.push( id );		}		private function setTabs():void		{			if( !tabIds || tabIds.length == 0 )			{				trace( "ALARM!!! SET TABS CALLED ON PANEL MANAGER, NO TABS HAVE BEEN ADDED" );				return;			}			var length:uint = tabIds.length;			var over:Function;			var out:Function;			tabManager = new DCTabManager( target );			for( var i:uint = 0; i < length; i++ )			{				over = tabs[tabIds[i]].over;				out = tabs[tabIds[i]].out;				tabManager.addTab( tabIds[i], tabSelected, over, out );			}			tabManager.init();		}		public function setInitPanel( btn:DisplayObject ):void		{			tabManager.tabSelected( btn );		}		public function tabSelected( btn:DisplayObject ):void		{			var item:Object = tabs[btn.name];			if( item.path && useLoader ) loadPanel( btn, item.path );			if( item.track ) trackItem( item.track );		}		public function loadPanel( btn:DisplayObject, path:String ):void		{			if( !panelLoader || !path ) return;			panelLoader.loadSwf( path, loadTarget );		}		public function clearPrevPanel():void		{			if( !currentPanel || !loadTarget ) return;			if( loadTarget.contains( currentPanel )) loadTarget.removeChild( currentPanel );		}		private function trackItem( track:String ):void		{			if( currentTrack ) DCTrackingManager.timerStop( currentTrack );			DCTrackingManager.timerStart( track );			currentTrack = track;		}	}}